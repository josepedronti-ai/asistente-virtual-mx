from fastapi import APIRouter, Form
from fastapi.responses import PlainTextResponse
from sqlalchemy.orm import Session
from datetime import timedelta
from dateutil import parser as dtparser
import unicodedata

from ..database import SessionLocal
from ..config import settings
from .. import models
from ..services.notifications import send_text
from ..services.scheduling import available_slots
from ..services.nlu import analizar

def normalize(s: str) -> str:
    s = (s or "").strip().lower()
    s = unicodedata.normalize("NFD", s)
    s = "".join(ch for ch in s if unicodedata.category(ch) != "Mn")
    return s

router = APIRouter(prefix="", tags=["webhooks"])

def db_session():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

def find_latest_reserved_for_contact(db: Session, contact: str):
    return (
        db.query(models.Appointment)
        .join(models.Patient)
        .filter(models.Patient.contact == contact)
        .filter(models.Appointment.status != models.AppointmentStatus.canceled)
        .order_by(models.Appointment.start_at.desc())
        .first()
    )

@router.post("/webhooks/whatsapp", response_class=PlainTextResponse)
async def whatsapp_webhook(From: str = Form(None), Body: str = Form(None)):
    if not From:
        return ""

    raw_text = Body or ""
    text = normalize(raw_text)

    # ----------------------------
    # Saludo profesional
    # ----------------------------
    if text in ("hola", "buenas", "menu", "buenos dias", "buenas tardes", "buenas noches"):
        send_text(
            From,
            "üëã ¬°Hola! Soy el asistente virtual del Dr. Ontiveros, cardi√≥logo intervencionista.\n"
            "Estoy aqu√≠ para ayudarte de forma r√°pida y sencilla.\n\n"
            "¬øEn qu√© puedo apoyarte hoy?\n"
            "‚Ä¢ Programar una cita\n"
            "‚Ä¢ Confirmar o reprogramar\n"
            "‚Ä¢ Informaci√≥n sobre costos, ubicaci√≥n o preparaci√≥n\n\n"
            "Escr√≠beme lo que necesitas y me encargar√© de ayudarte de inmediato."
        )
        return ""

    # ----------------------------
    # üß† NLU (cerebro) por intenci√≥n
    # ----------------------------
    nlu = analizar(raw_text)
    intent = nlu.get("intent", "fallback")
    entities = nlu.get("entities", {}) or {}
    reply = nlu.get("reply", "")

    print(f"[NLU] from={From} intent={intent} entities={entities} text={(raw_text)[:120]}")

    nlu_date = entities.get("date")
    time_pref = entities.get("time_pref")  # "manana"/"tarde"/"noche"
    topic = entities.get("topic")

    # ----------------------------
    # Informaci√≥n general
    # ----------------------------
    if intent == "info":
        if topic in ("costos", "costo", "precio", "precios"):
            send_text(From, "Con gusto. Los costos var√≠an seg√∫n el tipo de consulta. ¬øQu√© consulta te interesa?")
            return ""
        if topic in ("ubicacion", "direccion"):
            send_text(From, "Estamos en Cl√≠nica ABC, Av. Ejemplo 123, Le√≥n, Gto. Hay estacionamiento en sitio üöó.")
            return ""
        if topic in ("preparacion",):
            send_text(From, "Preparaci√≥n general: llega 10 min antes, trae identificaci√≥n y estudios previos si los tienes.")
            return ""
        send_text(From, reply or "¬øTe interesa costos, ubicaci√≥n o preparaci√≥n?")
        return ""

    # ----------------------------
    # Agendar o reprogramar
    # ----------------------------
    if intent in ("book", "reschedule"):
        if nlu_date:
            try:
                d = dtparser.parse(nlu_date).date()
                for db in db_session():
                    slots = available_slots(db, d, settings.TIMEZONE)
                    if not slots:
                        send_text(From, "No veo horarios ese d√≠a. ¬øOtro d√≠a u otro turno (ma√±ana/tarde)?")
                        break
                    sample = "\n".join(s.isoformat() for s in slots[:6])
                    send_text(
                        From,
                        "Estos son algunos horarios que tengo:\n" + sample +
                        "\nSi quieres m√°s opciones, escribe *cambiar*."
                    )
                return ""
            except Exception:
                pass
        # Sin fecha clara ‚Üí p√≠dela de forma natural
        send_text(From, reply or "Perfecto. ¬øQu√© d√≠a te gustar√≠a? Puedes decirlo con tus palabras (p. ej., '15 de agosto por la tarde').")
        return ""

    # ----------------------------
    # Confirmar cita (solo si est√° en reserved)
    # ----------------------------
    if intent == "confirm":
        for db in db_session():
            appt = find_latest_reserved_for_contact(db, From)
            if not appt or appt.status != models.AppointmentStatus.reserved:
                send_text(From, "Para confirmar necesito un horario reservado. Si quieres, escribe *agendar* o *cambiar*.")
                break
            appt.status = models.AppointmentStatus.confirmed
            db.commit()
            send_text(From, f"‚úÖ Confirm√© tu cita para {appt.start_at.isoformat()}. ¬øAlgo m√°s en lo que te ayude?")
        return ""

    # ----------------------------
    # Cancelar cita
    # ----------------------------
    if intent == "cancel":
        for db in db_session():
            appt = find_latest_reserved_for_contact(db, From)
            if not appt:
                send_text(From, "No encontr√© una cita a tu nombre. ¬øQuieres agendar una nueva?")
                break
            appt.status = models.AppointmentStatus.canceled
            db.commit()
            send_text(From, "üóëÔ∏è He cancelado tu cita. Si quieres, puedo proponerte nuevos horarios.")
        return ""

    # ----------------------------
    # Peque√±a charla o saludo detectado por NLU
    # ----------------------------
    if intent in ("smalltalk", "greet"):
        if reply:
            send_text(From, reply)
            return ""

    # ----------------------------
    # Atajo determinista: elecci√≥n 1 / 2 / 3
    # ----------------------------
    if text in ("1", "2", "3"):
        idx = int(text) - 1
        for db in db_session():
            appt = find_latest_reserved_for_contact(db, From)
            if not appt:
                send_text(From, "Por ahora no tengo opciones para elegir. Escribe *agendar* o *cambiar* para continuar.")
                break
            d = appt.start_at.date()
            slots = available_slots(db, d, settings.TIMEZONE) or available_slots(db, d + timedelta(days=1), settings.TIMEZONE)
            options = slots[:3]
            if not options or idx >= len(options):
                send_text(From, "No hay opciones disponibles para elegir ahora. Escribe *cambiar* para proponerte nuevas.")
                break
            new_start = options[idx]
            appt.start_at = new_start
            appt.status = models.AppointmentStatus.reserved
            db.commit()
            send_text(From, f"üîÅ Reprogram√© tu cita a {new_start.isoformat()}. Escribe *confirmar* para confirmar.")
        return ""

    # ----------------------------
    # Parser de fecha libre (ej. ‚Äú15 de agosto 5pm‚Äù)
    # ----------------------------
    try:
        d = dtparser.parse(text, dayfirst=False, fuzzy=True).date()
        for db in db_session():
            slots = available_slots(db, d, settings.TIMEZONE)
            if not slots:
                send_text(From, "No veo horarios ese d√≠a. ¬øQuieres intentar con otro d√≠a u otro turno (ma√±ana/tarde)?")
                break
            sample = "\n".join(s.isoformat() for s in slots[:6])
            send_text(
                From,
                "Estos son algunos horarios que tengo:\n" + sample +
                "\nSi quieres m√°s opciones, escribe *cambiar*."
            )
        return ""
    except Exception:
        pass

    # ----------------------------
    # Fallback final (respuesta natural del NLU)
    # ----------------------------
    final = analizar(raw_text)  # analizar devuelve dict
    send_text(From, final.get("reply", "¬øBuscas agendar, confirmar/reprogramar o informaci√≥n (costos, ubicaci√≥n, preparaci√≥n)?"))
    return ""